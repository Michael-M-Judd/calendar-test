{"version":3,"sources":["lib/theme.js","components/Provider/Provider.jsx","components/Calendar/components/EventsContainer/EventsContainer.jsx","components/Calendar/constants.js","components/Calendar/components/Timeline/Timeline.jsx","components/Calendar/calendar.utils.js","components/Calendar/components/EventCard/EventCard.jsx","components/Calendar/components/EventPosition/EventPosition.jsx","components/Calendar/Calendar.jsx","App.js","serviceWorker.js","index.js"],"names":["theme","primary","font","default","light","background","white","Provider","children","StyledDiv","styled","div","RelativeContainer","EventsContainer","periods","Object","freeze","am","pm","hours","time","period","hourBlockHeight","length","HourLabel","span","TimePeriod","HalfHourContainer","HourContainer","HourSection","showHalfHour","replace","section","Timeline","map","key","getEventHeight","start","end","cornerCardCss","css","cardBorderWidth","StyledCard","props","height","Title","Location","testKey","EventCard","title","location","event","data-testid","EventPosition","previousColumnEvent","baseEventPosition","order","overlapping","getEventKey","Calendar","initialEvents","useState","events","setEvents","window","layoutDay","eventGroups","useMemo","sortedEvents","sort","a","b","forEach","push","latestEventGroup","earliestEventInGroup","latestEventInGroup","reduce","currentLatest","findLatestEvent","getOverlappingEvents","eventGroup","index","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cf15378.chunk.js","sourcesContent":["export const theme = {\n  primary: \"#606EA2\",\n  font: {\n    default: \"rgb(100, 100, 100)\",\n    light: \"rgb(161, 161, 161)\"\n  },\n  background: {\n    default: \"#EBEBEB\",\n    white: \"#FFF\"\n  }\n};\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"../../lib/theme\";\n\nexport const Provider = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n  background: ${({ theme }) => theme.background.default};\n  padding: 0 10px;\n  width: 620px;\n  height: 720px;\n`;\n\nconst RelativeContainer = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const EventsContainer = ({ children }) => (\n  <StyledDiv>\n    <RelativeContainer>{children}</RelativeContainer>\n  </StyledDiv>\n);\n","// Height of a single hour\nexport const calendarHeight = 720;\n\nexport const periods = Object.freeze({\n  am: \"AM\",\n  pm: \"PM\"\n});\n\nexport const hours = [\n  { time: \"9:00\", period: periods.am },\n  { time: \"10:00\", period: periods.am },\n  { time: \"11:00\", period: periods.am },\n  { time: \"12:00\", period: periods.pm },\n  { time: \"1:00\", period: periods.pm },\n  { time: \"2:00\", period: periods.pm },\n  { time: \"3:00\", period: periods.pm },\n  { time: \"4:00\", period: periods.pm },\n  { time: \"5:00\", period: periods.pm },\n  { time: \"6:00\", period: periods.pm },\n  { time: \"7:00\", period: periods.pm },\n  { time: \"8:00\", period: periods.pm },\n  { time: \"9:00\", period: periods.pm }\n];\n\nexport const hourBlockHeight = calendarHeight / (hours.length - 1);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { hourBlockHeight, hours, periods } from \"../../constants\";\n\nconst HourLabel = styled.span`\n  font-weight: bold;\n  font-size: 16px;\n  color: ${({ theme }) => theme.font.default};\n  margin-right: 5px;\n`;\n\nconst TimePeriod = styled.span`\n  font-size: 12px;\n  color: ${({ theme }) => theme.font.light};\n`;\n\nconst HalfHourContainer = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.font.light};\n  position: absolute;\n  right: 0;\n  top: 50%;\n`;\n\nconst HourContainer = styled.div`\n  position: relative;\n  height: ${hourBlockHeight}px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst showHalfHour = (time, period) =>\n  !(time === \"9:00\" && period === periods.pm);\n\nconst HourSection = ({ time, period }) => (\n  <HourContainer>\n    <div>\n      <HourLabel>{time}</HourLabel>\n      <TimePeriod>{period}</TimePeriod>\n    </div>\n\n    {showHalfHour(time, period) && (\n      <HalfHourContainer>{time.replace(\"00\", \"30\")}</HalfHourContainer>\n    )}\n  </HourContainer>\n);\n\nconst StyledDiv = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  height: 100%;\n  padding-right: 10px;\n`;\n\nexport const Timeline = () => (\n  <StyledDiv>\n    {hours.map(({ time, period }) => (\n      <HourSection time={time} period={period} key={`${time}:${period}`} />\n    ))}\n  </StyledDiv>\n);\n","import { hourBlockHeight } from \"./constants\";\n\nconst hourLength = 60;\n\n/**\n * Gets the height in px of an event\n */\nexport const getEventHeight = ({ start, end }) => {\n  return ((end - start) / hourLength) * hourBlockHeight;\n};\n\n/**\n * Finds the absolute y-position for a calendar event.\n */\nexport const getEventYPosition = ({ event, previousColumnEvent }) => {\n  const baseEventPosition = (event.start / hourLength) * hourBlockHeight;\n\n  if (\n    // last event in column overlaps with latest event\n    previousColumnEvent &&\n    (previousColumnEvent.start <= event.start &&\n      previousColumnEvent.end >= event.start)\n  ) {\n    const overlapDistance = previousColumnEvent.end - event.start;\n\n    return baseEventPosition + overlapDistance + 10;\n  }\n\n  return baseEventPosition;\n};\n\nconst findLatestEvent = events =>\n  events.reduce(\n    (currentLatest, event) => {\n      if (currentLatest.end >= event.end) {\n        return currentLatest;\n      }\n\n      return event;\n    },\n    { end: 0 }\n  );\n\n/**\n * Finds all overlapping events and groups them together in an array\n * @returns {Event[][]}\n */\nexport const getOverlappingEvents = events => {\n  const sortedEvents = events.sort((a, b) => a.start - b.start);\n  const eventGroups = [];\n\n  sortedEvents.forEach(event => {\n    if (eventGroups.length === 0) {\n      eventGroups.push([event]);\n    } else {\n      // Since our events are sorted we always know the latest event group is the last one\n      const latestEventGroup = eventGroups[eventGroups.length - 1];\n      const earliestEventInGroup = latestEventGroup[0];\n      const latestEventInGroup = findLatestEvent(latestEventGroup);\n\n      if (\n        event.start >= earliestEventInGroup.start &&\n        event.start <= latestEventInGroup.end\n      ) {\n        latestEventGroup.push(event);\n      } else {\n        // no overlap\n        eventGroups.push([event]);\n      }\n    }\n  });\n\n  return eventGroups;\n};\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { getEventHeight } from \"../../calendar.utils\";\n\nconst cardBorderWidth = 5;\n\nconst cornerCardCss = css`\n  border-top: ${cardBorderWidth * 0.75}px solid transparent;\n  border-bottom: ${cardBorderWidth * 0.75}px solid transparent;\n  border-left: ${cardBorderWidth * 1.1}px solid ${({ theme }) => theme.primary};\n  border-radius: ${cardBorderWidth}px;\n  position: absolute;\n  height: 0px;\n  width: 0px;\n  content: \"\";\n`;\n\nconst StyledCard = styled.div`\n  background: ${({ theme }) => theme.background.white};\n  border-left: ${cardBorderWidth}px ${({ theme }) => theme.primary} solid;\n  border-radius: 0 2px 2px 0;\n  display: flex;\n  flex-direction: column;\n  height: ${props => props.height * 0.8}px;\n  padding: 10px;\n  position: relative;\n  margin: 0 5px;\n\n  &:after {\n    ${cornerCardCss}\n    bottom: -${cardBorderWidth * 0.75}px;\n    left: -${cardBorderWidth}px;\n  }\n\n  &:before {\n    ${cornerCardCss}\n    top: -${cardBorderWidth * 0.75}px;\n    left: -${cardBorderWidth}px;\n  }\n`;\n\nconst Title = styled.span`\n  color: ${({ theme }) => theme.primary};\n  font-weight: bold;\n  font-size: 18px;\n  margin-bottom: 5px;\n`;\n\nconst Location = styled.span`\n  color: ${({ theme }) => theme.font.light};\n  font-size: 12px;\n`;\n\nexport const testKey = ({ start, end }) => `event-card:${start}:${end}`;\n\nexport const EventCard = ({ title, location, event }) => {\n  return (\n    <StyledCard height={getEventHeight(event)} data-testid={testKey(event)}>\n      <Title>{title}</Title>\n      <Location>{location}</Location>\n    </StyledCard>\n  );\n};\n","import styled from \"styled-components\";\nimport { getEventYPosition } from \"../../calendar.utils\";\n\nconst getEventCardWidth = ({ overlapping }) => (overlapping ? \"50%\" : \"100%\");\nconst getEventCardXPosition = ({ order }) => (order % 2 === 0 ? 0 : \"50%\");\n\nexport const EventPosition = styled.div`\n  position: absolute;\n  top: ${getEventYPosition}px;\n  left: ${getEventCardXPosition};\n  width: ${getEventCardWidth};\n`;\n","import React, { useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { EventsContainer } from \"./components/EventsContainer\";\nimport { Timeline } from \"./components/Timeline\";\nimport { EventCard } from \"./components/EventCard\";\nimport { EventPosition } from \"./components/EventPosition\";\nimport { getOverlappingEvents } from \"./calendar.utils\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  margin: 50px;\n`;\n\nconst getEventKey = ({ start, end }) => `${start}:${end}`;\n\nexport const Calendar = ({ initialEvents = [] }) => {\n  const [events, setEvents] = useState(initialEvents);\n\n  // For the purposes of testing - setting it on the window\n  window.layoutDay = setEvents;\n\n  const eventGroups = useMemo(() => getOverlappingEvents(events), [events]);\n\n  return (\n    <StyledDiv>\n      <Timeline />\n      <EventsContainer>\n        {eventGroups.map(eventGroup =>\n          eventGroup.map((event, index) => (\n            <EventPosition\n              event={event}\n              previousColumnEvent={eventGroup[index - 2]}\n              key={getEventKey(event)}\n              order={index}\n              overlapping={eventGroup.length > 1}\n            >\n              <EventCard\n                event={event}\n                title=\"Sample Item\"\n                location=\"Sample Location\"\n              />\n            </EventPosition>\n          ))\n        )}\n      </EventsContainer>\n    </StyledDiv>\n  );\n};\n","import React from \"react\";\nimport { Provider } from \"./components/Provider\";\nimport { Calendar } from \"./components/Calendar\";\n\nfunction App() {\n  return (\n    <Provider>\n      <Calendar />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}